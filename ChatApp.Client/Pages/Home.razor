@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<style>
    html, body {
        overflow-x: hidden;
    }

    .container-fluid {
        max-width: 1200px;
        margin-left: 10px;
    }

    .chatbox {
        max-height: 400px;
        height: 400px;
        overflow-y: auto;
        overflow-x: hidden;
        border: 1px solid #ccc;
        padding: 10px;
        background: #f8f9fa;
        scroll-behavior: smooth;
        word-wrap: break-word;
        white-space: normal;
        display: flex;
        flex-direction: column;
        max-width: 50vw;
        min-width: 400px;
        width: 100%;
    }

    .chatbox p {
        word-wrap: break-word;
        overflow-wrap: break-word;
        max-width: 100%;
        white-space: normal;
    }

    .system-message {
        color: gray;
        font-style: italic;
    }

    .welcome-message {
        color: blue;
        font-weight: bold;
    }
</style>

<div class="container-fluid">
    @if (String.IsNullOrEmpty(username))
    {
        <h2>Login</h2>
        <div class="form-group">
            <div class="input-group mb-3 w-25">
                <span class="input-group-text" id="basic-addon1">@("@")</span>
                <input @bind="userInput" @bind:event="oninput" type="text" class="form-control" placeholder="Username" aria-label="Username">
            </div>
            @if (!string.IsNullOrEmpty(usernameError))
            {
                <div class="text-danger">@usernameError</div>
            }
        </div>
        <button @onclick="Login" class="btn btn-primary" disabled="@(String.IsNullOrEmpty(userInput))">Login</button>
    }
    else if (!string.IsNullOrEmpty(currentRoom))
    {
        <button @onclick="LeaveRoom" class="btn btn-danger mt-3">Leave @currentRoom</button>
        var userCount = roomUserCounts.ContainsKey(currentRoom) ? roomUserCounts[currentRoom] : 0;
        var userLabel = userCount == 1 ? "user" : "users";

        <h3 class="mt-3"><strong>@currentRoom</strong></h3>
        <p class="d-inline">Currently @userCount @userLabel in the chat room (</p>
        @foreach (var user in usersInRoom)
        {
            @if (usersInRoom.Count == 1)
            {
                <p class="d-inline">@user)</p>
            }
            else
            {
                @if(usersInRoom[usersInRoom.Count - 1] != user)
                {
                    <p class="d-inline">@user, </p>
                }
                else
                {
                    <p class="d-inline">@user)</p>
                }
            }
        }

        <div class="input-group mt-3 w-50">
            <input @bind="newMessage" @bind:event="oninput" type="text" class="form-control" placeholder="Type your message..." maxlength="512">
            <button @onclick="SendMessage" class="btn btn-primary" disabled="@(String.IsNullOrEmpty(newMessage) || newMessage.Length > 512)">
                Send
            </button>
        </div>

        <p class="text-muted">@newMessage.Length / 512 characters used</p>

        <div class="chatbox mt-3 w-75 px-3 bg-white rounded-4">
            @foreach (var message in messages)
            {
                <p class="@(message.StartsWith("🔔") ? "system-message" : message.StartsWith("💬") ? "welcome-message" : "")">@message</p>
            }
        </div>
    }
    else
    {
        <h4>You're logged in</h4>
        <p>Welcome, @username</p>

        <h5>Available Chatrooms</h5>

        <div class="input-group mt-3 w-50">
            <input @bind="newRoomName" @bind:event="oninput" type="text" class="form-control" placeholder="Enter new room name..." maxlength="50">
            <button @onclick="CreateRoom" class="btn btn-success" disabled="@(String.IsNullOrEmpty(newRoomName) || newRoomName.Length > 40)">
                Create Room
            </button>
        </div>

        <p class="text-muted">@newRoomName.Length / 40 characters used</p>

        <div class="list-group mt-3">
            @foreach (var room in chatRooms)
            {
                var userCount = roomUserCounts.ContainsKey(room) ? roomUserCounts[room] : 0;
                var userLabel = userCount == 1 ? "user" : "users";

                <div class="w-50 mb-2" style="display: inline-block;">
                    <button type="button" class="list-group-item list-group-item-action" @onclick="() => JoinRoom(room)"
                            style="display: inline-block; width: calc(100% - 90px);">
                        @room (@userCount @userLabel)
                    </button>

                    @if (room != "General")
                    {
                        <button class="btn btn-danger" @onclick="() => DeleteRoom(room)" disabled="@(userCount > 0)"
                                style="display: inline-block; width: 80px; margin-left: 5px;">
                            Delete
                        </button>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private string? userInput;
    private string username;
    private string usernameError;
    private HubConnection? hubConnection;
    private List<string> chatRooms = new();
    private Dictionary<string, int> roomUserCounts = new();
    private string? currentRoom;
    private List<string> messages = new();
    private string newMessage = string.Empty;
    private string newRoomName = string.Empty;
    private List<string> usersInRoom = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("http://localhost:5291/chathub"))
            .Build();

        hubConnection.On<string>("LoginSuccess", async user =>
        {
            username = userInput;
            usernameError = string.Empty;
            StateHasChanged();
            await hubConnection.SendAsync("RequestChatRooms");
        });

        hubConnection.On<string>("LoginFailed", message =>
        {
            usernameError = "Username already taken";
            StateHasChanged();
        });

        hubConnection.On<List<string>, Dictionary<string, int>>("ReceiveChatRooms", (rooms, userCounts) =>
        {
            chatRooms = rooms;
            roomUserCounts = userCounts;
            StateHasChanged();
        });

        hubConnection.On<string>("RoomJoined", room =>
        {
            currentRoom = room;
            messages.Clear();
            usersInRoom.Clear();
            messages.Add($"💬 Welcome to {room}! Please be respectful and keep the conversation friendly.");
            hubConnection.SendAsync("RequestUsersInRoom", room);
            StateHasChanged();
        });

        hubConnection.On<List<string>>("ReceiveUsersInRoom", async users =>
        {
            usersInRoom = users;
            if (!string.IsNullOrEmpty(currentRoom))
            {
                roomUserCounts[currentRoom] = users.Count;
            }
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            messages.Add($"{user}: {message}");
            StateHasChanged();
        });

        hubConnection.On<string>("ReceiveSystemMessage", (message) =>
        {
            messages.Add($"🔔 {message}");
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("RequestChatRooms");
    }

    private async Task Login() => await hubConnection.SendAsync("LoginUser", userInput);

    private async Task JoinRoom(string roomName) => await hubConnection.SendAsync("JoinRoom", username, roomName);

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessage) && newMessage.Length <= 512)
        {
            await hubConnection.SendAsync("SendMessage", username, currentRoom, newMessage);
            newMessage = string.Empty;
        }
    }

    private async Task LeaveRoom()
    {
        await hubConnection.SendAsync("LeaveRoom", username, currentRoom);
        currentRoom = null;
        usersInRoom.Clear();
        messages.Clear();
        StateHasChanged();
    }

    private async Task CreateRoom()
    {
        await hubConnection.SendAsync("CreateRoom", newRoomName);
        newRoomName = string.Empty;
    }

    private async Task DeleteRoom(string roomName) => await hubConnection.SendAsync("DeleteRoom", roomName);
}